package com.mk.infits.fragments;

import android.Manifest;
import android.app.Activity;
import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.ActivityNotFoundException;
import android.content.ContentResolver;
import android.content.ContentValues;
import android.content.Context;
import android.content.ContextWrapper;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.media.MediaScannerConnection;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;

import androidx.activity.result.ActivityResult;
import androidx.activity.result.ActivityResultCallback;
import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.core.app.NotificationCompat;
import androidx.core.content.ContextCompat;
import androidx.core.content.FileProvider;
import androidx.fragment.app.Fragment;

import android.os.Environment;
import android.provider.MediaStore;
import android.util.Base64;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Toast;

import com.mk.infits.BuildConfig;
import com.mk.infits.R;
import com.mk.infits.databinding.FragmentCameraFilesBinding;
import com.mk.infits.model.live.CalenderUtils;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.UUID;


public class CameraFilesFragment extends Fragment {

    FragmentCameraFilesBinding binding;

    private boolean isReadPermissionGranted = false;
    private boolean isWritePermissionGranted = false;

    ActivityResultLauncher<String[]> mPermissionResultLauncher;
    ActivityResultLauncher<Intent> mGetImage;
    Uri imgUri;
    private static final int WRITE_PERMISIION = 100;

//    String localInputFile = "F:/test/file/in/in.7z";
//    String localTmpPath = "F:/test/file/tmp";
//    String localOutputPath = "F:/test/file/out";
    String localInputFile = Environment.getExternalStorageDirectory().getAbsolutePath() + "/Download/ai.pdf";
    String localTmpPath = Environment.getExternalStorageDirectory().getAbsolutePath() + "/Download/temp";
    String localOutputPath = Environment.getExternalStorageDirectory().getAbsolutePath() + "/Download/out";
    Integer localBufferSize = 1024 * 1024;

    Context context;


    private String base64 = "";

    public CameraFilesFragment() {
    }



    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        binding = FragmentCameraFilesBinding.inflate(inflater,container,false);
        context = requireContext();
        return binding.getRoot();


    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        mPermissionResultLauncher = registerForActivityResult(new ActivityResultContracts.RequestMultiplePermissions(),
                new ActivityResultCallback<Map<String, Boolean>>() {
            @Override
            public void onActivityResult(Map<String, Boolean> result) {

                if (result.get(Manifest.permission.READ_EXTERNAL_STORAGE) != null){
                    isReadPermissionGranted = result.get(Manifest.permission.READ_EXTERNAL_STORAGE);
                }
                if (result.get(Manifest.permission.WRITE_EXTERNAL_STORAGE) != null){
                    isWritePermissionGranted = result.get(Manifest.permission.WRITE_EXTERNAL_STORAGE);
                }

            }
        });

        mGetImage = registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), new ActivityResultCallback<ActivityResult>() {
            @Override
            public void onActivityResult(ActivityResult result) {

                if (result.getResultCode() == Activity.RESULT_OK && result.getData() != null){
                    Bundle bundle = result.getData().getExtras();
                    Bitmap bitmap = (Bitmap) bundle.get("data");
                    binding.imgShow.setImageBitmap(bitmap);

                    if (isWritePermissionGranted){
                        File storageDir = new File(Environment.getExternalStorageDirectory()
                                + "MyApp"+ "/Files");

                        if (!storageDir.exists()) {
                            storageDir.mkdirs();
                        }
                        File mypath=new File(storageDir,"bitmap_image.jpg");
                        FileOutputStream fos = null;
                        if (saveImageToExternalStorage(UUID.randomUUID().toString(),bitmap)){

                            Toast.makeText(getContext(), "Image saved successfully", Toast.LENGTH_SHORT).show();

                        }
                    }else {
                        Toast.makeText(getContext(), "Permission not granted", Toast.LENGTH_SHORT).show();
                    }
                }

            }
        });

        requestPermission();

        binding.cameraBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                mGetImage.launch(new Intent(MediaStore.ACTION_IMAGE_CAPTURE));
            }
        });

        binding.FileBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M){
                    if (getActivity().checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE)
                    == PackageManager.PERMISSION_GRANTED){
                        String[] permissions = {Manifest.permission.WRITE_EXTERNAL_STORAGE};
                        requestPermissions(permissions,WRITE_PERMISIION);
                    }
                    else {
                        splitFile(localInputFile, localTmpPath, localBufferSize);
                        mergeFile(localTmpPath, localOutputPath, localBufferSize);
                        //createPDF(getContext(),System.currentTimeMillis()+"",base64);
                       // createAndSaveFileFromBase64Url(base64);
                    }
                }else {
                    splitFile(localInputFile, localTmpPath, localBufferSize);
                    mergeFile(localTmpPath, localOutputPath, localBufferSize);
                    //createPDF(getContext(),System.currentTimeMillis()+"",base64);
                    //createAndSaveFileFromBase64Url(base64);
                }

//                splitFile(localInputFile, localTmpPath, localBufferSize);
//                mergeFile(localTmpPath, localOutputPath, localBufferSize);

            }
        });

    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);

        switch (requestCode){
            case WRITE_PERMISIION:
                if (grantResults.length > 0 && grantResults[0]==
                PackageManager.PERMISSION_GRANTED){
                    splitFile(localInputFile, localTmpPath, localBufferSize);
                    mergeFile(localTmpPath, localOutputPath, localBufferSize);
//                    createPDF(getContext(),System.currentTimeMillis()+"",base64);
                    //createAndSaveFileFromBase64Url(base64);
                }else {
                    Toast.makeText(getContext(), "Storage Permission is required", Toast.LENGTH_SHORT).show();
                }
        }
    }

    private void requestPermission(){
        boolean minSdk = Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q;

        isReadPermissionGranted = ContextCompat.checkSelfPermission(requireContext(),
                Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;

        isWritePermissionGranted = ContextCompat.checkSelfPermission(requireContext(),
                Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;

        isWritePermissionGranted = isWritePermissionGranted || minSdk;

        List<String> permissionRequest = new ArrayList<>();

        if (isReadPermissionGranted){
            permissionRequest.add(Manifest.permission.READ_EXTERNAL_STORAGE);
        }
        if (isWritePermissionGranted){
            permissionRequest.add(Manifest.permission.WRITE_EXTERNAL_STORAGE);
        }
        if (permissionRequest.isEmpty()){
            mPermissionResultLauncher.launch(permissionRequest.toArray(new String[0]));
        }
    }

    private boolean saveImageToExternalStorage(String imgName, Bitmap bmp) {


        Uri ImageCollection = null;
        ContentResolver resolver = getActivity().getContentResolver();

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q){

            ImageCollection = MediaStore.Images.Media.getContentUri(MediaStore.VOLUME_EXTERNAL_PRIMARY);
        }else {
            ImageCollection = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
        }

        String relativeLocation = Environment.getExternalStorageDirectory() + "/Infits/";
        ContentValues contentValues = new ContentValues();
        contentValues.put(MediaStore.Images.Media.DISPLAY_NAME, imgName + ".jpg");
        contentValues.put(MediaStore.Images.Media.MIME_TYPE,"image/jpeg");
        contentValues.put(MediaStore.Files.FileColumns.RELATIVE_PATH, relativeLocation);
        Uri imageUri = resolver.insert(ImageCollection,contentValues);




        try {

            OutputStream outputStream = resolver.openOutputStream(imageUri);
            bmp.compress(Bitmap.CompressFormat.JPEG,100,outputStream);
            return true;

        }catch (Exception e){
            Toast.makeText(getContext(), "Image not saved: \n" + e.getMessage(), Toast.LENGTH_SHORT).show();
        }

        return false;

    }

    public void createAndSaveFileFromBase64Url(String url) {
        //File path = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS);
        String folder_main = "Infits";
        int extentionStartIndex = url.indexOf('/');
        int extensionEndIndex = url.indexOf(';');
        int filetypeStartIndex = url.indexOf(':');

        String fileType = url.substring(filetypeStartIndex + 1, extentionStartIndex);
        //String fileExtension = url.substring(extentionStartIndex + 1, extensionEndIndex);

        //File path = new File(Environment.getExternalStorageDirectory(), folder_main);
        //String filetype = url.substring(url.indexOf("/") + 1, url.indexOf(";"));
        //String filename = System.currentTimeMillis() +".pdf";

        //File path = new File(Environment.getExternalStorageDirectory().getPath( ) + "/Infits");

        String path = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM) + File.separator + "YourFolderName";



        //File path = Environment.getExternalStorageDirectory();
        File dir = new File(path + "/Infits/");
        String filename = System.currentTimeMillis() + ".pdf";
        File file = new File(dir,filename);
        try {



            if(!dir.exists())
                dir.mkdirs();
//            path.setExecutable(true);
//            path.setReadable(true);
//            path.setWritable(true);
            if(!file.exists())
                file.createNewFile();

            String base64EncodedString = url.substring(url.indexOf(",") + 1);
            byte[] decodedBytes = Base64.decode(base64EncodedString, Base64.DEFAULT);
            OutputStream os = new FileOutputStream(file);
            os.write(decodedBytes);
            os.close();

            //Tell the media scanner about the new file so that it is immediately available to the user.
            MediaScannerConnection.scanFile(requireContext(),
                    new String[]{file.toString()}, null,
                    new MediaScannerConnection.OnScanCompletedListener() {
                        public void onScanCompleted(String path, Uri uri) {
                            Log.i("ExternalStorage", "Scanned " + path + ":");
                            Log.i("ExternalStorage", "-> uri=" + uri);
                        }
                    });

            //Set notification after download complete and add "click to view" action to that
            String mimetype = url.substring(url.indexOf(":") + 1, url.indexOf("/"));
            Intent intent = new Intent();
            intent.setAction(android.content.Intent.ACTION_VIEW);
            intent.setDataAndType(Uri.fromFile(file), (mimetype + "/*"));
            //PendingIntent pIntent = PendingIntent.getActivity(requireContext(), 0, intent, 0);

            Notification notification = new NotificationCompat.Builder(requireContext())
                    .setSmallIcon(R.mipmap.ic_launcher)
                    .setContentText("Downloaded")
                    .setContentTitle(filename)
                    .build();
            Toast.makeText(getContext(), "Downloaded :" + "\n"+path +":"+filename, Toast.LENGTH_SHORT).show();


            notification.flags |= Notification.FLAG_AUTO_CANCEL;
            int notificationId = 85851;
            NotificationManager notificationManager = (NotificationManager) getActivity().getSystemService(Context.NOTIFICATION_SERVICE);
            notificationManager.notify(notificationId, notification);
        } catch (IOException e) {
            Log.w("ExternalStorage", "Error writing " + file, e);
            Toast.makeText(requireContext(), "error", Toast.LENGTH_LONG).show();
        }

        file.toString();
    }


    public static void createPDF(Context mContext, String fileName, String base64) {
        try {
            String folderPath;
            File dwldsPath;

            if (Build.VERSION.SDK_INT > Build.VERSION_CODES.Q) {
                folderPath = mContext.getExternalFilesDir(Environment.DIRECTORY_DOWNLOADS) + File.separator + "Infits";
                dwldsPath = new File(folderPath + "/" + fileName);

                File folder = new File(folderPath);
                folder.mkdirs();

                ContentValues values = new ContentValues();
                values.put(MediaStore.MediaColumns.DISPLAY_NAME, fileName); // file name
                values.put(MediaStore.MediaColumns.MIME_TYPE, "application/pdf"); // file extension, will automatically add to file
                values.put(MediaStore.DownloadColumns.RELATIVE_PATH, folderPath); // end "/" is not mandatory
//                Uri uriFile = MediaStore.Audio.Media.getContentUri(
//                        MediaStore.VOLUME_EXTERNAL_PRIMARY);
                Uri uriFile = mContext.getContentResolver().insert(MediaStore.Files.getContentUri(MediaStore.VOLUME_EXTERNAL_PRIMARY), values); // important!
                OutputStream outputStream = mContext.getContentResolver().openOutputStream(uriFile);
                outputStream.write(Base64.decode(base64, 0));
                outputStream.close();
            } else {
                folderPath = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS) + File.separator + "Infits";
                dwldsPath = new File(folderPath + "/" + fileName);

                File folder = new File(folderPath);
                folder.mkdirs();

                FileOutputStream os = new FileOutputStream(dwldsPath, false);
                os.write(Base64.decode(base64, 0));
                os.flush();
                os.close();
            }

            //openPDF(mContext, dwldsPath);
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ActivityNotFoundException e) {
            Toast.makeText(mContext, "No PDF Viewer Installed", Toast.LENGTH_LONG).show();
        }
    }

    public void openPDF(File dwldsPath) {
        Intent intentUrl = new Intent(Intent.ACTION_VIEW);
        Uri uri = FileProvider.getUriForFile(getContext(), BuildConfig.APPLICATION_ID + ".provider", dwldsPath);
        intentUrl.setDataAndType(uri, "application/pdf");
        intentUrl.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
        intentUrl.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
        getContext().startActivity(intentUrl);
    }


    /**
     * Cut large files into small files
     *
     * @param inputFile  Big file
     * @param tmpPath    Temporary directory of small files
     * @param bufferSize Cut small file size
     */
    public static void splitFile(String inputFile, String tmpPath, Integer bufferSize) {
        FileInputStream fis = null;
        FileOutputStream fos = null;
        try {
            // Original large file
            fis = new FileInputStream(inputFile);

            // File read cache
            byte[] buffer = new byte[bufferSize];
            int len = 0;

            // File count after cutting (also file name)
            int fileNum = 0;

            // Large files cut into small files
            while ((len = fis.read(buffer)) != -1) {
                fos = new FileOutputStream(tmpPath + "/" + fileNum);
                fos.write(buffer, 0, len);
                fos.close();
                fileNum++;
            }
            System.out.println("Split file" + inputFile + "Complete, total build" + fileNum + "Files");
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (fis != null) {
                try {
                    fis.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (fos != null) {
                try {
                    fos.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    /**
     * Merge cut small file into large file
     *
     * @param tmpPath    Temporary directory of small files
     * @param outputPath Output path
     * @param bufferSize Cut small file size
     */
    public  void mergeFile(String tmpPath, String outputPath, Integer bufferSize) {
        FileInputStream fis = null;
        FileOutputStream fos = null;
        try {
            // Get the number of small files to cut
            File tempFilePath = new File(tmpPath);
            File[] files = tempFilePath.listFiles();
            if (files == null) {
                System.out.println("No file.");
                return;
            }
            int fileNum = files.length;

            // Restored large file path
            String outputFile = outputPath + "/" + generateFileName();
            fos = new FileOutputStream(outputFile);

            // File read cache
            byte[] buffer = new byte[bufferSize];
            int len = 0;

            // Restore all cut small files to one large file
            for (int i = 0; i < fileNum; i++) {
                fis = new FileInputStream(tmpPath + "/" + i);
                len = fis.read(buffer);
                fos.write(buffer, 0, len);
            }
            System.out.println("Merge catalog file:" + tmpPath + "Complete, the generated file is:" + outputFile);
            openPDF(outputFile);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (fis != null) {
                try {
                    fis.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (fos != null) {
                try {
                    fos.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    private void openPDF(String outputPath) {
        Intent intentUrl = new Intent(Intent.ACTION_VIEW);
        Uri uri = FileProvider.getUriForFile(context, BuildConfig.APPLICATION_ID + ".provider", new File(outputPath));
        intentUrl.setDataAndType(uri, "application/pdf");
        intentUrl.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
        intentUrl.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
        context.startActivity(intentUrl);
    }

    /**
     * Generate random filename
     *
     * @return file name
     */
    public static String generateFileName() {

        String time =""+ System.currentTimeMillis();
        return time + ".pdf";
    }
}